{"version":3,"sources":["Components/Button/index.tsx","Components/Input/index.tsx","Components/ToDoItem/index.tsx","Contexts/ToDoList/index.tsx","Components/ToDoList/index.tsx","Components/InputContainer/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","Styled","div","props","backgroundColor","hoverColor","Label","Button","label","onClick","InputBox","input","Input","placeholder","onChange","value","event","target","ToDoItem","onDelete","ToDoListContext","createContext","toDoList","addToDo","deleteToDo","ToDoListProvider","children","useState","setToDoList","useEffect","list","localStorage","getItem","JSON","parse","Provider","toDo","newList","setItem","stringify","index","splice","ToDoList","useContext","map","item","InputContainer","setToDo","Contents","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.504f4d69.chunk.js","sourcesContent":["import React from 'react';\nimport Styled from 'styled-components';\n\ninterface Props {\n  readonly label : string;\n  readonly backgroundColor? : string;\n  readonly hoverColor? : string;\n  readonly onClick? : () => void;\n}\n\ninterface ContainerProps {\n \n  readonly backgroundColor : string;\n  readonly hoverColor : string;\n}\n\nconst Container= Styled.div<ContainerProps>`\ntext-align:center;\nbackground-color: ${(props) => props.backgroundColor};\npadding : 10px 20px;\nborder-radius : 8px;\ncursor : pointer;\n&:hover {\n  background-color: ${(props) => props.hoverColor}; \n} \n\n&:active {\n  box-shadow: inset 5px 5px 10px rgba(0,0,0,0.2);\n}\n`;\n \n// ${} <- 직접대입코드\nconst Label = Styled.div`\ncolor: #FFFFFFF;\nfont-size : 16px;\n`;\n\nexport const Button = ({label, \nbackgroundColor= \"#304FFE\", \nhoverColor = ' #1E40FF',\nonClick} : Props) => {\n  return (\n    <Container backgroundColor={backgroundColor}\n    hoverColor={hoverColor}\n    \n    onClick={onClick}\n    >\n\n<Label>{label}</Label>\n\n    </Container>\n  );\n}\n\n","import { OpenDirOptions } from 'fs';\nimport React from 'react';\nimport Styled from 'styled-components';\n\nconst InputBox  = Styled.input`\nflex:1;\nfont-size: 16px;\npadding : 10px 10px;\nborder-radius : 8px;\nborder : 1px solid #BDBDBD;\noutline:none;\n`;\n\ninterface Props {\n  readonly placeholder? : string;\n  readonly onChange?: (text:string) => void;\n  readonly value?: string;\n\n}\nexport const Input = ({placeholder,onChange,value}: Props) => {\n  return ( \n    <InputBox placeholder={placeholder}\n    value={value}\n    onChange = {(event) => {if(typeof onChange ==='function')\n      {onChange(event.target.value);}}} />\n  );\n}","import React from 'react';\r\nimport Styled from 'styled-components';\r\n\r\nimport {Button} from 'Components/Button';\r\n\r\nconst Container = Styled.div`\r\ndisplay:flex;\r\nborder-bottom: 1px solid #BDBDBD;\r\nalign-items : center;\r\nmargin : 10px;\r\npadding : 10px;\r\n`;\r\n\r\nconst Label = Styled.div`\r\nflwx:1;\r\nfont-size:16px;\r\nmargin-right : 20px;\r\n`;\r\n\r\ninterface Props {\r\n    readonly label : string;\r\n    readonly onDelete?:() => void;\r\n}\r\n\r\nexport const ToDoItem = ({label, onDelete}: Props) => {\r\n    return (\r\n        <Container>\r\n            <Label>{label}</Label>\r\n            <Button label=\"삭제\" backgroundColor=\"#FF1744\"\r\n            hoverColor=\"#F01440\"\r\n            onClick={onDelete} />\r\n        </Container>\r\n    );\r\n}","import React, { createContext, useState , useEffect} from 'react';\r\n\r\ninterface Context {\r\n    readonly toDoList  : string[];\r\n    readonly addToDo: (toDo : string) => void;\r\n    readonly deleteToDo: ( index: number) => void ;\r\n}\r\n\r\nconst ToDoListContext = createContext<Context>({\r\n    toDoList: [],\r\n    addToDo: (): void => {},\r\n    deleteToDo: (): void => {},\r\n});\r\n\r\ninterface Props {\r\n    children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nconst ToDoListProvider = ({ children }: Props): JSX.Element => {\r\n    const [toDoList, setToDoList] = useState<string[]>([]);\r\n\r\n    const addToDo = (toDo: string): void => {\r\n        if(toDo) {\r\n            const newList = [...toDoList, toDo];\r\n            localStorage.setItem('ToDoList',JSON.stringify(newList));\r\n            setToDoList(newList);\r\n        }\r\n    };\r\n    const deleteToDo = (index:number):void => {\r\n        let list = [...toDoList];\r\n        list.splice(index,1);\r\n        localStorage.setItem('ToDoList',JSON.stringify(list));\r\n        setToDoList(list);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const list =localStorage.getItem('ToDoList');\r\n        if (list) {\r\n            setToDoList(JSON.parse(list));\r\n        }\r\n    }, []);\r\n\r\n    return(\r\n        <ToDoListContext.Provider\r\n        value={{\r\n            toDoList,\r\n            addToDo,\r\n            deleteToDo,\r\n        }}>\r\n            {children}\r\n        </ToDoListContext.Provider>\r\n    );\r\n};\r\n\r\nexport { ToDoListContext, ToDoListProvider};\r\n","import React, {useContext,useEffect} from 'react';\r\nimport Styled from 'styled-components';\r\nimport {ToDoItem} from 'Components/ToDoItem';\r\nimport {ToDoListContext} from 'Contexts';\r\n\r\nconst Container = Styled.div`\r\nmin-width : 350px;\r\nheight : 400px;\r\noverflow-y : scroll;\r\nborder : 1px solid #BDBDBD;\r\nmargin-bottom : 20px;\r\n`;\r\n\r\nexport const ToDoList = () => {\r\n    const {toDoList,deleteToDo } = useContext(ToDoListContext);\r\n\r\n    return (\r\n        <Container data-testid=\"toDoList\">\r\n            {toDoList.map((item, index) => (\r\n                <ToDoItem key={item} label ={item} onDelete={ () =>\r\n            deleteToDo(index)} />\r\n            ))}\r\n        </Container>\r\n    );\r\n};\r\n\r\n","import React, {useState,useContext} from 'react';\r\nimport Styled from 'styled-components';\r\n\r\nimport {Button} from 'Components/Button';\r\nimport {Input} from 'Components/Input';\r\nimport {ToDoListContext} from 'Contexts'\r\n\r\nconst Container = Styled.div`\r\ndisplay : flex;\r\n`;\r\n\r\nexport const InputContainer = () => {\r\n    const [toDo,setToDo] = useState('');\r\n    const { addToDo} = useContext(ToDoListContext);\r\n    return (\r\n        <Container>\r\n            <Input placeholder=\"할 일을 입력해 주세요\" value={toDo}\r\n            onChange={setToDo} />\r\n            <Button \r\n            label=\"추가\"\r\n            onClick={ () => {\r\n                addToDo(toDo);\r\n                setToDo('');\r\n            }} />\r\n        </Container>\r\n    );\r\n};","import React from 'react';\nimport Styled from 'styled-components';\nimport {InputContainer , ToDoList } from 'Components';\nimport {ToDoListProvider} from 'Contexts';\n\n\nconst Container = Styled.div`\nmin-height : 100vh;\ndisplay:flex;\nalign-items : center;\njustify-content:center;\nflex-direction : column;\n`;\n\nconst Contents = Styled.div `\ndisplay : flex;\nbakcground-color : #FFFFFF;\nflex-direction : column;\npadding:20px;\nborder-radius:8px;\nbox-shadow: 5px 5px 10px rgba(0,0,0,0.2);\n`;\n\nconst Label = Styled.div`\nflex:1;\nfont-size:15px;\npadding:10px;\n`;\n\nfunction App() {\n  \n  return (\n    <ToDoListProvider>\n    <Container>\n     <Contents>\n      <ToDoList />\n        <InputContainer />\n     </Contents>     \n      </Container>\n      </ToDoListProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}